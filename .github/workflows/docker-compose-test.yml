name: docker-compose-test

on:
  workflow_call:
  push:
    branches:
      - '*'
      - '!deploy'
      - '!gh-pages'

permissions:
  contents: read

jobs:
  docker-compose-tests:
    # this has a chance of infinite loop if we write a test wrong, timeout should catch it eventually.
    timeout-minutes: 10
    runs-on: ubuntu-latest

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Initialize .docker.env and .env
        run: |
          # .docker.env for Docker Compose (container values)
          cp config.example.json config.docker.json
          # Replace database values
          jq '.database.host = "db"' config.docker.json > tmp.json && mv tmp.json config.docker.json
          cat <<EOF > .docker.env
          PORT=3000
          OAUTH2_CLIENT_ID=1234567890
          OAUTH2_CLIENT_SECRET=1234567890
          EOF

          cp config.example.json config.json
          # .env for local app (host values)
          cat <<EOF > .env
          PORT=3000
          OAUTH2_CLIENT_ID=1234567890
          OAUTH2_CLIENT_SECRET=1234567890
          EOF

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: v22.12.0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.16.0

      - name: Install Dependencies
        run: pnpm i

      - name: Start Postgres and Redis in background
        run: |
          docker compose --project-name test up -d db redis

      - name: Wait for Postgres
        run: |
          for i in $(seq 1 15); do
            docker exec db pg_isready -U admin && exit 0
            sleep 1
          done
          echo "Postgres did not become ready in time" >&2
          exit 1

      - name: Wait for Redis
        run: |
          for i in $(seq 1 15); do
            docker exec redis redis-cli ping && exit 0
            sleep 1
          done
          echo "Redis did not become ready in time" >&2
          exit 1

      - name: Setup Database Roles
        run: |
          docker exec db psql -U admin -c "CREATE ROLE username WITH LOGIN PASSWORD 'password';"
          docker exec db psql -U admin -c "CREATE DATABASE db WITH OWNER username;"
          docker exec db psql -U admin -c "GRANT admin TO username;"
          pnpm db:migrate
          pnpm db:push --force

      - name: Build app
        run: pnpm build

      - name: Build Docker image
        run: docker build -t my-app:latest .

      - name: Debug Docker images
        run: |
          echo "Listing all docker images:"
          docker images
          echo "Compose images for project 'test':"
          docker compose --project-name test images
          echo "Compose ps for project 'test':"
          docker compose --project-name test ps

      - name: Start App
        run: docker compose --project-name test up -d app

      - name: Debug container state
        run: |
          echo "Container status:"
          docker compose --project-name test ps
          echo "App logs:"
          docker compose --project-name test logs app --tail=50
          echo "Port bindings:"
          docker port $(docker compose --project-name test ps -q app) || true

      - name: Wait for app startup
        run: |
          echo "Waiting for app to fully start..."
          for i in $(seq 1 60); do
            if docker compose --project-name test logs app | grep -q "listening on"; then
              echo "App is ready! (found 'listening on' in logs)"
              exit 0
            fi
            if curl -f http://localhost:3000 >/dev/null 2>&1; then
              echo "App responding to requests!"
              exit 0
            fi
            echo "Waiting for app startup... (attempt $i/60)"
            sleep 2
          done
          echo "App failed to start within timeout!"
          echo "Final app logs:"
          docker compose --project-name test logs app --tail=20
          exit 1

      - name: Scan Docker image with Trivy
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image my-app:latest
